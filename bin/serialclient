#!/usr/bin/ruby 

require 'rubygems'
require 'serialport'
require 'rink'
require 'micro-optparse'


options = Parser.new do |p|
  p.banner = "Serial terminal client"
  p.option :port, "path to serial device, ex: /dev/ttyUSB0", :default => ""
  p.option :speed, "speed in baups", :default => 115200 , :value_satisfies => lambda {|x| x >= 50 && x <= 256000}
  p.option :data_bits, "data bits for modem params [5..8] on Unix [4..8] on Windows", :default => 8, :value_satisfies => lambda {|x|  x >= 4 && x <= 8 }
  p.option :stop_bits, "data bits for modem params", :default => 1, :value_in_set => [1, 2]
  p.option :parity, "parity: NONE/EVEN/ODD/[MARK/SPACE] [Windows only]", :default => "NONE", :value_in_set => ["NONE", "EVEN", "ODD", "MARK", "SPACE"]
end.process!

class Serial_client < Rink::Console
  option :allow_ruby => false

  def initialize (port_, baup_, data_bits_, stop_bits_, parity_)
    @sp = SerialPort.new port_, baup_
    @sp.set_modem_params( { "data_bits" => data_bits_,
                            "stop_bits" => stop_bits_,
                            "parity"    => parity_ }
                          )
    @read_th = Thread.new {
      while 1 do
        puts @sp.gets
      end
    }
    super()
  end

  def process_line (line_)
    @sp.write(line_+ "\n")
    sleep 0.01  # if device respond to a request, it has time to display: this is only cosmetic 
  end

end

Signal.trap('TERM') do
  puts "\n"
  Process.exit 0
end

Signal.trap('INT') do 
  puts "\n"
  Process.exit 0
end

Serial_client.new(options[:port], options[:speed].to_i, options[:data_bits], options[:stop_bits], SerialPort.const_get(options[:parity]))
